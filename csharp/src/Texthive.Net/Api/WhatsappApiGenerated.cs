/*
 * TextHive Core API
 *
 * TextHive is a unified messaging API that enables developers to seamlessly send messages across multiple channels including SMS and WhatsApp. It provides programmatic management of customer accounts, messaging capabilities with intelligent routing, message delivery, and template management. The API supports creating, updating, and managing customer profiles, sending messages using templates, retrieving contact information, and handling templates across different messaging channels.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developers@texthive.khulnasoft.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Texthive.Net.Client;
using Texthive.Net.Model;

namespace Texthive.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsappApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve WhatsApp contact information
        /// </summary>
        /// <remarks>
        /// Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </remarks>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsAppPayload</returns>
        WhatsAppPayload GetWhatsappContact(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0);

        /// <summary>
        /// Retrieve WhatsApp contact information
        /// </summary>
        /// <remarks>
        /// Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </remarks>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsAppPayload</returns>
        ApiResponse<WhatsAppPayload> GetWhatsappContactWithHttpInfo(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsappApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve WhatsApp contact information
        /// </summary>
        /// <remarks>
        /// Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </remarks>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsAppPayload</returns>
        System.Threading.Tasks.Task<WhatsAppPayload> GetWhatsappContactAsync(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve WhatsApp contact information
        /// </summary>
        /// <remarks>
        /// Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </remarks>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsAppPayload)</returns>
        System.Threading.Tasks.Task<ApiResponse<WhatsAppPayload>> GetWhatsappContactWithHttpInfoAsync(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWhatsappApi : IWhatsappApiSync, IWhatsappApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WhatsappApiGenerated : IWhatsappApi
    {
        private Texthive.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public WhatsappApiGenerated() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public WhatsappApiGenerated(string basePath)
        {
            this.Configuration = Texthive.Net.Client.Configuration.MergeConfigurations(
                Texthive.Net.Client.GlobalConfiguration.Instance,
                new Texthive.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Texthive.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Texthive.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Texthive.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappApiGenerated"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WhatsappApiGenerated(Texthive.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Texthive.Net.Client.Configuration.MergeConfigurations(
                Texthive.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Texthive.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Texthive.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Texthive.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WhatsappApiGenerated"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WhatsappApiGenerated(Texthive.Net.Client.ISynchronousClient client, Texthive.Net.Client.IAsynchronousClient asyncClient, Texthive.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Texthive.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Texthive.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Texthive.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Texthive.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Texthive.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve WhatsApp contact information Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </summary>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WhatsAppPayload</returns>
        public WhatsAppPayload GetWhatsappContact(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0)
        {
            Texthive.Net.Client.ApiResponse<WhatsAppPayload> localVarResponse = GetWhatsappContactWithHttpInfo(phoneNumber, retrieveIfDoesNotExists, sentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve WhatsApp contact information Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </summary>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WhatsAppPayload</returns>
        public Texthive.Net.Client.ApiResponse<WhatsAppPayload> GetWhatsappContactWithHttpInfo(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Texthive.Net.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling WhatsappApi->GetWhatsappContact");
            }

            Texthive.Net.Client.RequestOptions localVarRequestOptions = new Texthive.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Texthive.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Texthive.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber, ""));
            localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "retrieveIfDoesNotExists", retrieveIfDoesNotExists, ""));
            if (sentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "sentId", sentId, ""));
            }

            localVarRequestOptions.Operation = "WhatsappApi.GetWhatsappContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WhatsAppPayload>("/whatsapp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWhatsappContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve WhatsApp contact information Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </summary>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WhatsAppPayload</returns>
        public async System.Threading.Tasks.Task<WhatsAppPayload> GetWhatsappContactAsync(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Texthive.Net.Client.ApiResponse<WhatsAppPayload> localVarResponse = await GetWhatsappContactWithHttpInfoAsync(phoneNumber, retrieveIfDoesNotExists, sentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve WhatsApp contact information Fetches or creates WhatsApp contact information for a given phone number. This endpoint validates WhatsApp availability and returns detailed contact metadata including business account status and profile information.
        /// </summary>
        /// <exception cref="Texthive.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phoneNumber">Phone number in international format (E.164)</param>
        /// <param name="retrieveIfDoesNotExists">Whether to create a new contact if one doesn&#39;t exist</param>
        /// <param name="sentId">Optional Sent platform identifier for tracking (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WhatsAppPayload)</returns>
        public virtual async System.Threading.Tasks.Task<Texthive.Net.Client.ApiResponse<WhatsAppPayload>> GetWhatsappContactWithHttpInfoAsync(string phoneNumber, bool retrieveIfDoesNotExists, string sentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Texthive.Net.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling WhatsappApi->GetWhatsappContact");
            }


            Texthive.Net.Client.RequestOptions localVarRequestOptions = new Texthive.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Texthive.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Texthive.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "phoneNumber", phoneNumber, ""));
            localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "retrieveIfDoesNotExists", retrieveIfDoesNotExists, ""));
            if (sentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Texthive.Net.Client.ClientUtils.ParameterToMultiMap("", "sentId", sentId, ""));
            }

            localVarRequestOptions.Operation = "WhatsappApi.GetWhatsappContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WhatsAppPayload>("/whatsapp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWhatsappContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
